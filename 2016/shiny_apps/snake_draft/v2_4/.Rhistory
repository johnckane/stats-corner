luck_sum = sum(luck),
points_sum = sum(points),
pa_sum = sum(PA),
sos = mean(opp_pw)) %>%
ungroup() %>%
mutate(pw_rank = dense_rank(-pw_sum),
pw_rank_btm = dense_rank(pw_sum),
luck_rank_top = dense_rank(-luck_sum),
luck_rank_btm = dense_rank(luck_sum),
points_rank = dense_rank(-points_sum),
pa_rank = dense_rank(-pa_sum),
points_rank_btm = dense_rank(points_sum),
sos_rank = dense_rank(-sos))
eleven_weeks <- games_played %>% filter(week <= 11)
eleven_weeks_summary <- eleven_weeks %>%
ungroup() %>%
mutate(luck = W - pw) %>%
group_by(year,owner) %>%
summarise(pw_sum = sum(pw),
luck_sum = sum(luck),
pa_sum = sum(PA),
points_sum = sum(points))
eleven_weeks_summary %>%
ungroup() %>%
arrange(-pw_sum) %>%
slice(1:10) %>%
left_join(.,season_summary %>% select(year,owner,pw_sum,pw_rank), by = c("year","owner")) %>%
select(1,2,3,5,6) %>%
`colnames<-`(c("Year", "Owner", "PW Through 10 Weeks", "PW Season Total","All Time Rank")) %>%
kable(digits = 2)
logistic_fit <- glm(data = games_played,
W ~ points,
family = 'binomial')
logistic_plot <- ggplot(data = games_played,
aes(x = points,
y = W))
logistic_plot +
geom_jitter()
logistic_plot +
geom_jitter(width = 0,
height = 0.1)
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("Win?",
breaks = c(0,1),
label = c("No","Yes"))
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1))
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = seq(from = min(games_played$points,
to = max(games_played$points))),
W = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points))))
data.frame(points = seq(from = min(games_played$points,
to = max(games_played$points))),
W = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)))
seq(from = min(games_played$points,
+                                         to = max(games_played$points)))
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = seq(from = min(games_played$points),
to = max(games_played$points)),
W = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points))))
points = seq(from = min(games_played$points),
to = max(games_played$points),
by = 1
)
points
points = seq(from = min(games_played$points),
to = max(games_played$points),
by = 1)
predicted_win = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)))
predicted_win = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points))
logistic_plot <- ggplot(data = games_played,
aes(x = points, y = W)
logistic_plot <- ggplot(data = games_played,
logistic_plot <- ggplot(data = games_played,
aes(x = points, y = W)
)
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_plot <- ggplot(data = games_played,
aes(x = points, y = W,colour = as.factor(W))
)
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_plot <- ggplot(data = games_played,
aes(x = points, y = W)
)
logistic_plot +
geom_jitter(width = 0,
height = 0.1) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_plot +
geom_jitter(width = 0,
height = 0.01) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
?roc
auc(logistic_fit$data$W,logistic_fit$fitted.values)
library(pROC)
auc(logistic_fit$data$W,logistic_fit$fitted.values)
logistic_fit <- glm(data = games_played,
W ~ points,
family = 'binomial')
library(pROC)
auc(logistic_fit$data$W,logistic_fit$fitted.values)
points = seq(from = min(games_played$points),
to = max(games_played$points),
by = 1)
predicted_win = exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points)/
(1 + exp(logistic_fit$coef[1] + logistic_fit$coef[2]*points))
logistic_plot <- ggplot(data = games_played,
aes(x = points, y = W)
)
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W))
logistic_fit$coef
-logistic_fit$coef[1]/logistic_fit$coef[2]
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1)) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1),
sec.axis = sec_axis(trans = ~round(.,1))) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1),
sec.axis = sec_axis(trans = ~.,
breaks = c(0,1),
label = c("No","Yes"))) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1),
sec.axis = sec_axis(trans = ~.,
breaks = c(0,1),
label = c("No","Yes")),
name = "Actually Win?") +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1),
sec.axis = sec_axis(trans = ~.,
breaks = c(0,1),
label = c("No","Yes"),
name = "Actually Win?")) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25))
logistic_plot +
geom_jitter(width = 0,
height = 0.05) +
scale_y_continuous("P(Win)",
breaks = seq(from=0,to=1,by=0.1),
sec.axis = sec_axis(trans = ~.,
breaks = c(0,1),
label = c("No","Yes"),
name = "Actually Win?")) +
geom_line(data = data.frame(points = points,W = predicted_win),
aes(x = points, y = W)) +
scale_x_continuous("Points Scored",
breaks = seq(from = 25, to = 175, by = 25)) +
ggtitle("Proability of Winning by Points Scored",
subtitle = "Dots Indicate Games, Line is Model Prediction")
season2016 <- filter(games_played, year == 2016)
plot1 <- ggplot(data = season2016,
aes(x = week,
y = points,
shape = as.factor(W)))
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% filter(rk = 6)),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
aes(week,points),
colour = 'red') +
geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
aes(week,points),
colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% filter(rk == 6)),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
aes(week,points),
colour = 'red') +
geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
aes(week,points),
colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% ungroup() %>% filter(rk == 6)),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
aes(week,points),
colour = 'red') +
geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
aes(week,points),
colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
plot1 <- ggplot(data = season2016,
aes(x = week,
y = points,
shape = as.factor(W)))
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% ungroup() %>% filter(rk == 6)),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
aes(week,points),
colour = 'red') +
geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
aes(week,points),
colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
season2016 <- filter(games_played, year == 2016)
plot1 <- ggplot(data = season2016,
aes(x = week,
y = points,
shape = as.factor(W)))
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% ungroup() %>% filter(rk == 6)),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
aes(week,points),
colour = 'red') +
geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
aes(week,points),
colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = data.frame(season2016 %>% ungroup() %>% filter(rk == 6)),
aes(x = week, y = points),
linetype = 2) +
# geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
#            aes(week,points),
#            colour = 'red') +
# geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
#           aes(week,points),
#           colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
plot1 +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = season2016 %>% ungroup() %>% filter(rk == 6),
aes(x = week, y = points),
linetype = 2) +
# geom_point(data = season2016 %>% filter(owner == "Olson") %>% select(week,points,W),
#            aes(week,points),
#            colour = 'red') +
# geom_point(data = season2016 %>% filter(owner == "Hartman") %>% select(week,points,W),
#           aes(week,points),
#           colour = 'blue') +
ggtitle("Points Scored By Week",
subtitle = "Olson in Red, Hartman in Blue, Dashed Line is Weekly Median") +
guides(legend.position = NULL)
library(MASS)
install.packages("BAS")
library(BAS)
data(UScrime)
UScrime[,-2] <- log(UScrime[,-2])
crime.ZS <- bas.lm(y~.,
data = UScrime,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC")
diagnostics(crime.ZS)
plot(crime.ZS, which = 1, add.smooth = F)
plot(crime.ZS, which = 2, add.smooth = F)
plot(crime.ZS, which = 3)
plot(crime.ZS, which = 4)
image(crime.ZS, rotate = F)
library(googlesheets)
library(dplyr)
library(reshape2)
library(tidyr)
library(knitr)
library(ggplot2)
library(shiny)
workbook <- gs_url("https://docs.google.com/spreadsheets/d/1c24qtCDF6MnL1I-nNG2ovymFB3fYj1NsWpLe3SGCbJs/pubhtml")
owner <- workbook %>% gs_read(ws = "Owner-Team Name")
games <- workbook %>% gs_read(ws = "Regular Season Games")
owner_games <- left_join(games,owner,by=c("year","team"))
data <- arrange(owner_games,game_id,points)
data$W <- rep(0,dim(data)[1])
data$L <- rep(0,dim(data)[1])
data$T <- rep(0,dim(data)[1])
data$PA <- rep(0,dim(data)[1])
data$result <- rep(" ",dim(data)[1])
data$last_of_streak <- rep(0,dim(data)[1])
data$opponent <- rep(" ",dim(data)[1])
games_played <- data %>% filter(points > 0)
### Loop to determine winners, and points against
for(i in seq(from=1,to=dim(games_played)[1],by=2)){
games_played$PA[i]   <- games_played$points[i+1]
games_played$PA[i+1] <- games_played$points[i]
games_played$opponent[i] <- games_played$owner[i+1]
games_played$opponent[i+1] <- games_played$owner[i]
if(games_played$points[i] < games_played$points[i+1]){
games_played$L[i] <- 1
games_played$W[i+1] <- 1
games_played$result[i] <- "L"
games_played$result[i+1] <- "W"
}
if(games_played$points[i] == games_played$points[i+1]){
games_played$T[i] <- 1
games_played$T[i+1] <- 1
games_played$result[i] <- "T"
games_played$result[i+1] <- "T"
}
}
games_played <- games_played %>%
arrange(year,week,desc(points)) %>%
group_by(year,week) %>%
mutate(rk = rank(points,ties.method="min"),
opp_rk = rank(PA,ties.method="min"))
# Now to calculate and add up proportional wins
games_played$pw<- ifelse(games_played$year==2009,(games_played$rk-1)/9,(games_played$rk-1)/11)
games_played$opp_pw <- ifelse(games_played$year==2009,(games_played$opp_rk-1)/9,(games_played$opp_rk-1)/11)
owners <- games_played %>% filter(year == 2016) %>% group_by(owner) %>% select(owner) %>% slice(1)
season2016 <- filter(games_played, year == 2016)
shinyApp(
ui = fluidPage(
selectInput("owner",
label = h3("Choose One"),
choices = owners,
selected = "Olson"),
plotOutput("game_plot")
),
server = function(input, output) {
output$game_plot <- renderPlot({
ggplot(data = season2016,
aes(x = week,
y = points,
shape = as.factor(W))) +
geom_point() +
scale_x_continuous("Week", breaks = c(1:11)) +
geom_line(data = season2016 %>% ungroup() %>% filter(rk == 6),
aes(x = week, y = points),
linetype = 2) +
geom_point(data = season2016 %>% filter(owner == input$owner) %>% select(week,points,W),
aes(week,points),
colour = 'red')
})
}
)
shiny::runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
shiny::runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
?lapply
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
df <- read.csv("/home/john/stats_corner/2016/shiny_apps/snake_draft/v2_1/faa_projection_data.csv",
#df <- read.csv("/srv/shiny-server/stats-corner/2016/snake-assistant/faa_projection_data.csv",
stringsAsFactors = FALSE,
header = TRUE)
summary(df$ppr_adp)
summary(as.numeric(df$ppr_adp))
df_team <- str_split(df$player_team, " - ")
df_team2 <- sapply(df_team,"[[",2)
df$team <- df_team2
team <- c("GB","PHI","JAC","KC","NO","SEA","MIN","TB","CAR","DAL","BAL",
"LA","MIA","NYG","PIT","SF","ARI","CHI","CIN","HOU","NE","WAS",
"BUF","DET","IND","OAK","ATL","DEN","NYJ","SD","CLE","TEN")
bye <- c(4,4,5,5,5,5,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,11,11,11,11,13,13)
team_byes <- data.frame(team,bye,stringsAsFactors = F)
df <- left_join(df,team_byes, by = "team") %>% select(-team)
week <- c(1:13)
week_df <- data.frame(week, dummy = 1)
#' These are functions used to do the lineup optimizer:
df %>%
mutate(adp = ifelse(ppr_adp == "null", 999, as.numeric(ppr_adp)))
df2 <- df %>%
mutate(adp = ifelse(ppr_adp == "null", 999, as.numeric(ppr_adp)))
summary(df2$adp)
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
shiny::runApp('stats_corner/2016/shiny_apps/snake_draft/v2_5')
steps <-  c(0,5000,6250,8750,10000)
cals <- c(1752,2243,2646,3049,3645)
library(ggplot2)
df <- data.frame(steps,cals)
qplot(data=df, x = steps, y = cals) + geom_smooth(method = "lm")
fit <- lm(data=df, cals ~ steps)
fit$coef
today = 7566
predict(object = fit, newdata = data.frame(steps = today))
today = 8396
predict(object = fit, newdata = data.frame(steps = today))
4580-3397
today = 7291
predict(object = fit, newdata = data.frame(steps = today))
3599-2985
1183-614
today = 11677
predict(object = fit, newdata = data.frame(steps = today))
569-1775
today = 10537
predict(object = fit, newdata = data.frame(steps = today))
today = 7204
predict(object = fit, newdata = data.frame(steps = today))
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_5')
runApp('stats_corner/2016/shiny_apps/snake_draft/v2_4')
